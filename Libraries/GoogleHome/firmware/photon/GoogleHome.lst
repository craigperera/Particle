
/Users/craigperera/GitHub/Particle/Libraries/GoogleHome/firmware/photon/GoogleHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c68  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a0c80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000004  20000300  080a0c84  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000550  20000304  20000304  00030304  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a0c88  080a0c88  00020c88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a0cb0  080a0cb0  00020cb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00055ca0  00000000  00000000  00020cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008d89  00000000  00000000  00076954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a840  00000000  00000000  0007f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001240  00000000  00000000  00089f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001c60  00000000  00000000  0008b15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bfdf  00000000  00000000  0008cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001298a  00000000  00000000  000a8d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008179a  00000000  00000000  000bb726  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00009390  00000000  00000000  0013cec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a0 0a 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 fd1b 	bl	80a0a68 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 fd20 	bl	80a0a7e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a0c84 	.word	0x080a0c84
 80a004c:	20000304 	.word	0x20000304
 80a0050:	20000304 	.word	0x20000304
 80a0054:	20000854 	.word	0x20000854
 80a0058:	20000854 	.word	0x20000854

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fb49 	bl	80a06f4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a0c54 	.word	0x080a0c54
 80a0084:	080a0c80 	.word	0x080a0c80

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 babe 	b.w	80a0608 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fabc 	bl	80a060a <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 baeb 	b.w	80a0670 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 b8bb 	b.w	80a0214 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_GLOBAL__sub_I__ZN10GoogleHomeC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00ae:	f000 b819 	b.w	80a00e4 <HAL_Pin_Map>
	...

080a00b4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a00b4:	b508      	push	{r3, lr}
 80a00b6:	4b02      	ldr	r3, [pc, #8]	; (80a00c0 <os_mutex_create+0xc>)
 80a00b8:	681b      	ldr	r3, [r3, #0]
 80a00ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a00bc:	9301      	str	r3, [sp, #4]
 80a00be:	bd08      	pop	{r3, pc}
 80a00c0:	080601d0 	.word	0x080601d0

080a00c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a00c4:	b508      	push	{r3, lr}
 80a00c6:	4b02      	ldr	r3, [pc, #8]	; (80a00d0 <HAL_RNG_GetRandomNumber+0xc>)
 80a00c8:	681b      	ldr	r3, [r3, #0]
 80a00ca:	685b      	ldr	r3, [r3, #4]
 80a00cc:	9301      	str	r3, [sp, #4]
 80a00ce:	bd08      	pop	{r3, pc}
 80a00d0:	0806019c 	.word	0x0806019c

080a00d4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a00d4:	b508      	push	{r3, lr}
 80a00d6:	4b02      	ldr	r3, [pc, #8]	; (80a00e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a00d8:	681b      	ldr	r3, [r3, #0]
 80a00da:	695b      	ldr	r3, [r3, #20]
 80a00dc:	9301      	str	r3, [sp, #4]
 80a00de:	bd08      	pop	{r3, pc}
 80a00e0:	0806019c 	.word	0x0806019c

080a00e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a00e4:	b508      	push	{r3, lr}
 80a00e6:	4b02      	ldr	r3, [pc, #8]	; (80a00f0 <HAL_Pin_Map+0xc>)
 80a00e8:	681b      	ldr	r3, [r3, #0]
 80a00ea:	681b      	ldr	r3, [r3, #0]
 80a00ec:	9301      	str	r3, [sp, #4]
 80a00ee:	bd08      	pop	{r3, pc}
 80a00f0:	080601b0 	.word	0x080601b0

080a00f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a00f4:	b508      	push	{r3, lr}
 80a00f6:	4b02      	ldr	r3, [pc, #8]	; (80a0100 <HAL_SPI_Init+0xc>)
 80a00f8:	681b      	ldr	r3, [r3, #0]
 80a00fa:	69db      	ldr	r3, [r3, #28]
 80a00fc:	9301      	str	r3, [sp, #4]
 80a00fe:	bd08      	pop	{r3, pc}
 80a0100:	080601b4 	.word	0x080601b4

080a0104 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0104:	b508      	push	{r3, lr}
 80a0106:	4b02      	ldr	r3, [pc, #8]	; (80a0110 <HAL_USART_Init+0xc>)
 80a0108:	681b      	ldr	r3, [r3, #0]
 80a010a:	699b      	ldr	r3, [r3, #24]
 80a010c:	9301      	str	r3, [sp, #4]
 80a010e:	bd08      	pop	{r3, pc}
 80a0110:	080601c4 	.word	0x080601c4

080a0114 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0114:	b508      	push	{r3, lr}
 80a0116:	4b02      	ldr	r3, [pc, #8]	; (80a0120 <HAL_USART_Write_Data+0xc>)
 80a0118:	681b      	ldr	r3, [r3, #0]
 80a011a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a011c:	9301      	str	r3, [sp, #4]
 80a011e:	bd08      	pop	{r3, pc}
 80a0120:	080601c4 	.word	0x080601c4

080a0124 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0124:	b508      	push	{r3, lr}
 80a0126:	4b02      	ldr	r3, [pc, #8]	; (80a0130 <HAL_USART_Available_Data+0xc>)
 80a0128:	681b      	ldr	r3, [r3, #0]
 80a012a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a012c:	9301      	str	r3, [sp, #4]
 80a012e:	bd08      	pop	{r3, pc}
 80a0130:	080601c4 	.word	0x080601c4

080a0134 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0134:	b508      	push	{r3, lr}
 80a0136:	4b02      	ldr	r3, [pc, #8]	; (80a0140 <HAL_USART_Read_Data+0xc>)
 80a0138:	681b      	ldr	r3, [r3, #0]
 80a013a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a013c:	9301      	str	r3, [sp, #4]
 80a013e:	bd08      	pop	{r3, pc}
 80a0140:	080601c4 	.word	0x080601c4

080a0144 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0144:	b508      	push	{r3, lr}
 80a0146:	4b02      	ldr	r3, [pc, #8]	; (80a0150 <HAL_USART_Peek_Data+0xc>)
 80a0148:	681b      	ldr	r3, [r3, #0]
 80a014a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a014c:	9301      	str	r3, [sp, #4]
 80a014e:	bd08      	pop	{r3, pc}
 80a0150:	080601c4 	.word	0x080601c4

080a0154 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0154:	b508      	push	{r3, lr}
 80a0156:	4b02      	ldr	r3, [pc, #8]	; (80a0160 <HAL_USART_Flush_Data+0xc>)
 80a0158:	681b      	ldr	r3, [r3, #0]
 80a015a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a015c:	9301      	str	r3, [sp, #4]
 80a015e:	bd08      	pop	{r3, pc}
 80a0160:	080601c4 	.word	0x080601c4

080a0164 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0164:	b508      	push	{r3, lr}
 80a0166:	4b02      	ldr	r3, [pc, #8]	; (80a0170 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0168:	681b      	ldr	r3, [r3, #0]
 80a016a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a016c:	9301      	str	r3, [sp, #4]
 80a016e:	bd08      	pop	{r3, pc}
 80a0170:	080601c4 	.word	0x080601c4

080a0174 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0174:	b508      	push	{r3, lr}
 80a0176:	4b02      	ldr	r3, [pc, #8]	; (80a0180 <HAL_USB_USART_Init+0xc>)
 80a0178:	681b      	ldr	r3, [r3, #0]
 80a017a:	681b      	ldr	r3, [r3, #0]
 80a017c:	9301      	str	r3, [sp, #4]
 80a017e:	bd08      	pop	{r3, pc}
 80a0180:	080601d8 	.word	0x080601d8

080a0184 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0184:	b508      	push	{r3, lr}
 80a0186:	4b02      	ldr	r3, [pc, #8]	; (80a0190 <HAL_USB_USART_Available_Data+0xc>)
 80a0188:	681b      	ldr	r3, [r3, #0]
 80a018a:	691b      	ldr	r3, [r3, #16]
 80a018c:	9301      	str	r3, [sp, #4]
 80a018e:	bd08      	pop	{r3, pc}
 80a0190:	080601d8 	.word	0x080601d8

080a0194 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0194:	b508      	push	{r3, lr}
 80a0196:	4b02      	ldr	r3, [pc, #8]	; (80a01a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0198:	681b      	ldr	r3, [r3, #0]
 80a019a:	695b      	ldr	r3, [r3, #20]
 80a019c:	9301      	str	r3, [sp, #4]
 80a019e:	bd08      	pop	{r3, pc}
 80a01a0:	080601d8 	.word	0x080601d8

080a01a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a01a4:	b508      	push	{r3, lr}
 80a01a6:	4b02      	ldr	r3, [pc, #8]	; (80a01b0 <HAL_USB_USART_Receive_Data+0xc>)
 80a01a8:	681b      	ldr	r3, [r3, #0]
 80a01aa:	699b      	ldr	r3, [r3, #24]
 80a01ac:	9301      	str	r3, [sp, #4]
 80a01ae:	bd08      	pop	{r3, pc}
 80a01b0:	080601d8 	.word	0x080601d8

080a01b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a01b4:	b508      	push	{r3, lr}
 80a01b6:	4b02      	ldr	r3, [pc, #8]	; (80a01c0 <HAL_USB_USART_Send_Data+0xc>)
 80a01b8:	681b      	ldr	r3, [r3, #0]
 80a01ba:	69db      	ldr	r3, [r3, #28]
 80a01bc:	9301      	str	r3, [sp, #4]
 80a01be:	bd08      	pop	{r3, pc}
 80a01c0:	080601d8 	.word	0x080601d8

080a01c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a01c4:	b508      	push	{r3, lr}
 80a01c6:	4b02      	ldr	r3, [pc, #8]	; (80a01d0 <HAL_USB_USART_Flush_Data+0xc>)
 80a01c8:	681b      	ldr	r3, [r3, #0]
 80a01ca:	6a1b      	ldr	r3, [r3, #32]
 80a01cc:	9301      	str	r3, [sp, #4]
 80a01ce:	bd08      	pop	{r3, pc}
 80a01d0:	080601d8 	.word	0x080601d8

080a01d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a01d4:	b508      	push	{r3, lr}
 80a01d6:	4b02      	ldr	r3, [pc, #8]	; (80a01e0 <set_system_mode+0xc>)
 80a01d8:	681b      	ldr	r3, [r3, #0]
 80a01da:	685b      	ldr	r3, [r3, #4]
 80a01dc:	9301      	str	r3, [sp, #4]
 80a01de:	bd08      	pop	{r3, pc}
 80a01e0:	080601a4 	.word	0x080601a4

080a01e4 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a01e4:	b508      	push	{r3, lr}
 80a01e6:	4b02      	ldr	r3, [pc, #8]	; (80a01f0 <system_set_usb_request_app_handler+0xc>)
 80a01e8:	681b      	ldr	r3, [r3, #0]
 80a01ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a01ec:	9301      	str	r3, [sp, #4]
 80a01ee:	bd08      	pop	{r3, pc}
 80a01f0:	080601a4 	.word	0x080601a4

080a01f4 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <system_set_usb_request_result+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	080601a4 	.word	0x080601a4

080a0204 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <network_ready+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	691b      	ldr	r3, [r3, #16]
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	080601c8 	.word	0x080601c8

080a0214 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <free+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	685b      	ldr	r3, [r3, #4]
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	080601a0 	.word	0x080601a0

080a0224 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0224:	4770      	bx	lr

080a0226 <_ZN9IPAddressD0Ev>:
 80a0226:	b510      	push	{r4, lr}
 80a0228:	4604      	mov	r4, r0
 80a022a:	f7ff ff36 	bl	80a009a <_ZdlPv>
 80a022e:	4620      	mov	r0, r4
 80a0230:	bd10      	pop	{r4, pc}

080a0232 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0234:	460f      	mov	r7, r1
 80a0236:	f100 0608 	add.w	r6, r0, #8
 80a023a:	1d05      	adds	r5, r0, #4
 80a023c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a023e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0242:	220a      	movs	r2, #10
 80a0244:	4638      	mov	r0, r7
 80a0246:	f000 f882 	bl	80a034e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a024a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a024c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a024e:	d007      	beq.n	80a0260 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0250:	2c00      	cmp	r4, #0
 80a0252:	d0f4      	beq.n	80a023e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0254:	212e      	movs	r1, #46	; 0x2e
 80a0256:	4638      	mov	r0, r7
 80a0258:	f000 f84c 	bl	80a02f4 <_ZN5Print5printEc>
 80a025c:	4404      	add	r4, r0
 80a025e:	e7ee      	b.n	80a023e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0260:	4620      	mov	r0, r4
 80a0262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0264 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0264:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0266:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a026a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a026e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0272:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0276:	2304      	movs	r3, #4
 80a0278:	6041      	str	r1, [r0, #4]
 80a027a:	7503      	strb	r3, [r0, #20]
 80a027c:	bd10      	pop	{r4, pc}
	...

080a0280 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0282:	4d04      	ldr	r5, [pc, #16]	; (80a0294 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0284:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0286:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a028a:	9500      	str	r5, [sp, #0]
 80a028c:	f7ff ffea 	bl	80a0264 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0290:	b003      	add	sp, #12
 80a0292:	bd30      	pop	{r4, r5, pc}
 80a0294:	080a0abc 	.word	0x080a0abc

080a0298 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0298:	4a01      	ldr	r2, [pc, #4]	; (80a02a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a029c:	601a      	str	r2, [r3, #0]
 80a029e:	4770      	bx	lr
 80a02a0:	080a0b83 	.word	0x080a0b83
 80a02a4:	20000308 	.word	0x20000308

080a02a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a02a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a02aa:	4606      	mov	r6, r0
 80a02ac:	460d      	mov	r5, r1
 80a02ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a02b0:	2400      	movs	r4, #0
  while (size--) {
 80a02b2:	42bd      	cmp	r5, r7
 80a02b4:	d00c      	beq.n	80a02d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a02b6:	6833      	ldr	r3, [r6, #0]
 80a02b8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a02bc:	689b      	ldr	r3, [r3, #8]
 80a02be:	4630      	mov	r0, r6
 80a02c0:	4798      	blx	r3
     if (chunk>=0)
 80a02c2:	2800      	cmp	r0, #0
 80a02c4:	db01      	blt.n	80a02ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a02c6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a02c8:	e7f3      	b.n	80a02b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a02ca:	2c00      	cmp	r4, #0
 80a02cc:	bf08      	it	eq
 80a02ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a02d0:	4620      	mov	r0, r4
 80a02d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a02d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a02d4:	b570      	push	{r4, r5, r6, lr}
 80a02d6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a02d8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a02da:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a02dc:	b149      	cbz	r1, 80a02f2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a02de:	f000 fbd6 	bl	80a0a8e <strlen>
 80a02e2:	682b      	ldr	r3, [r5, #0]
 80a02e4:	4602      	mov	r2, r0
 80a02e6:	4621      	mov	r1, r4
 80a02e8:	4628      	mov	r0, r5
    }
 80a02ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a02ee:	68db      	ldr	r3, [r3, #12]
 80a02f0:	4718      	bx	r3
    }
 80a02f2:	bd70      	pop	{r4, r5, r6, pc}

080a02f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a02f4:	6803      	ldr	r3, [r0, #0]
 80a02f6:	689b      	ldr	r3, [r3, #8]
 80a02f8:	4718      	bx	r3

080a02fa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a02fa:	2a01      	cmp	r2, #1
 80a02fc:	bf98      	it	ls
 80a02fe:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0300:	b530      	push	{r4, r5, lr}
 80a0302:	460b      	mov	r3, r1
 80a0304:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0306:	2100      	movs	r1, #0
 80a0308:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a030c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0310:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0314:	fb05 3312 	mls	r3, r5, r2, r3
 80a0318:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a031a:	2b09      	cmp	r3, #9
 80a031c:	bf94      	ite	ls
 80a031e:	3330      	addls	r3, #48	; 0x30
 80a0320:	3337      	addhi	r3, #55	; 0x37
 80a0322:	b2db      	uxtb	r3, r3
 80a0324:	4621      	mov	r1, r4
 80a0326:	f804 3901 	strb.w	r3, [r4], #-1
 80a032a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a032c:	2d00      	cmp	r5, #0
 80a032e:	d1ef      	bne.n	80a0310 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0330:	f7ff ffd0 	bl	80a02d4 <_ZN5Print5writeEPKc>
}
 80a0334:	b00b      	add	sp, #44	; 0x2c
 80a0336:	bd30      	pop	{r4, r5, pc}

080a0338 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0338:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a033a:	b922      	cbnz	r2, 80a0346 <_ZN5Print5printEmi+0xe>
 80a033c:	6803      	ldr	r3, [r0, #0]
 80a033e:	b2c9      	uxtb	r1, r1
 80a0340:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0342:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0344:	4718      	bx	r3
  else return printNumber(n, base);
 80a0346:	b2d2      	uxtb	r2, r2
}
 80a0348:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a034a:	f7ff bfd6 	b.w	80a02fa <_ZN5Print11printNumberEmh>

080a034e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a034e:	f7ff bff3 	b.w	80a0338 <_ZN5Print5printEmi>

080a0352 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0352:	4770      	bx	lr

080a0354 <_ZN8SPIClassD0Ev>:
 80a0354:	b510      	push	{r4, lr}
 80a0356:	4604      	mov	r4, r0
 80a0358:	f7ff fe9f 	bl	80a009a <_ZdlPv>
 80a035c:	4620      	mov	r0, r4
 80a035e:	bd10      	pop	{r4, pc}

080a0360 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0360:	b570      	push	{r4, r5, r6, lr}
 80a0362:	4604      	mov	r4, r0
 80a0364:	460e      	mov	r6, r1
 80a0366:	4b07      	ldr	r3, [pc, #28]	; (80a0384 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a0368:	2500      	movs	r5, #0
 80a036a:	6003      	str	r3, [r0, #0]
 80a036c:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a0370:	f7ff fea0 	bl	80a00b4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0374:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0376:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0378:	f7ff febc 	bl	80a00f4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a037c:	60a5      	str	r5, [r4, #8]
}
 80a037e:	4620      	mov	r0, r4
 80a0380:	bd70      	pop	{r4, r5, r6, pc}
 80a0382:	bf00      	nop
 80a0384:	080a0bb4 	.word	0x080a0bb4

080a0388 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0388:	2000      	movs	r0, #0
 80a038a:	f7ff bf23 	b.w	80a01d4 <set_system_mode>
	...

080a0390 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0390:	4b02      	ldr	r3, [pc, #8]	; (80a039c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0392:	681a      	ldr	r2, [r3, #0]
 80a0394:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0396:	601a      	str	r2, [r3, #0]
 80a0398:	4770      	bx	lr
 80a039a:	bf00      	nop
 80a039c:	20000300 	.word	0x20000300
 80a03a0:	2000030c 	.word	0x2000030c

080a03a4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a03a4:	4770      	bx	lr

080a03a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a03a6:	7441      	strb	r1, [r0, #17]
 80a03a8:	4770      	bx	lr

080a03aa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a03aa:	7c00      	ldrb	r0, [r0, #16]
 80a03ac:	f7ff beda 	b.w	80a0164 <HAL_USART_Available_Data_For_Write>

080a03b0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a03b0:	7c00      	ldrb	r0, [r0, #16]
 80a03b2:	f7ff beb7 	b.w	80a0124 <HAL_USART_Available_Data>

080a03b6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a03b6:	7c00      	ldrb	r0, [r0, #16]
 80a03b8:	f7ff bec4 	b.w	80a0144 <HAL_USART_Peek_Data>

080a03bc <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a03bc:	7c00      	ldrb	r0, [r0, #16]
 80a03be:	f7ff beb9 	b.w	80a0134 <HAL_USART_Read_Data>

080a03c2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a03c2:	7c00      	ldrb	r0, [r0, #16]
 80a03c4:	f7ff bec6 	b.w	80a0154 <HAL_USART_Flush_Data>

080a03c8 <_ZN11USARTSerialD0Ev>:
 80a03c8:	b510      	push	{r4, lr}
 80a03ca:	4604      	mov	r4, r0
 80a03cc:	f7ff fe65 	bl	80a009a <_ZdlPv>
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	bd10      	pop	{r4, pc}

080a03d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a03d4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a03d6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a03d8:	4604      	mov	r4, r0
 80a03da:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a03dc:	b925      	cbnz	r5, 80a03e8 <_ZN11USARTSerial5writeEh+0x14>
 80a03de:	7c00      	ldrb	r0, [r0, #16]
 80a03e0:	f7ff fec0 	bl	80a0164 <HAL_USART_Available_Data_For_Write>
 80a03e4:	2800      	cmp	r0, #0
 80a03e6:	dd05      	ble.n	80a03f4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a03e8:	4631      	mov	r1, r6
 80a03ea:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a03ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a03f0:	f7ff be90 	b.w	80a0114 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a03f4:	4628      	mov	r0, r5
 80a03f6:	bd70      	pop	{r4, r5, r6, pc}

080a03f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a03f8:	b510      	push	{r4, lr}
 80a03fa:	4604      	mov	r4, r0
 80a03fc:	4608      	mov	r0, r1
 80a03fe:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0400:	2200      	movs	r2, #0
 80a0402:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0408:	60a2      	str	r2, [r4, #8]
 80a040a:	4a05      	ldr	r2, [pc, #20]	; (80a0420 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a040c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a040e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0410:	2201      	movs	r2, #1
 80a0412:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0414:	461a      	mov	r2, r3
 80a0416:	f7ff fe75 	bl	80a0104 <HAL_USART_Init>
}
 80a041a:	4620      	mov	r0, r4
 80a041c:	bd10      	pop	{r4, pc}
 80a041e:	bf00      	nop
 80a0420:	080a0bf0 	.word	0x080a0bf0

080a0424 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a0424:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0426:	4d0c      	ldr	r5, [pc, #48]	; (80a0458 <_Z22__fetch_global_Serial1v+0x34>)
 80a0428:	6829      	ldr	r1, [r5, #0]
 80a042a:	f011 0401 	ands.w	r4, r1, #1
 80a042e:	d111      	bne.n	80a0454 <_Z22__fetch_global_Serial1v+0x30>
 80a0430:	4628      	mov	r0, r5
 80a0432:	f7ff fe34 	bl	80a009e <__cxa_guard_acquire>
 80a0436:	b168      	cbz	r0, 80a0454 <_Z22__fetch_global_Serial1v+0x30>
 80a0438:	4a08      	ldr	r2, [pc, #32]	; (80a045c <_Z22__fetch_global_Serial1v+0x38>)
 80a043a:	4621      	mov	r1, r4
 80a043c:	4b08      	ldr	r3, [pc, #32]	; (80a0460 <_Z22__fetch_global_Serial1v+0x3c>)
 80a043e:	4809      	ldr	r0, [pc, #36]	; (80a0464 <_Z22__fetch_global_Serial1v+0x40>)
 80a0440:	f7ff ffda 	bl	80a03f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0444:	4628      	mov	r0, r5
 80a0446:	f7ff fe2f 	bl	80a00a8 <__cxa_guard_release>
 80a044a:	4a07      	ldr	r2, [pc, #28]	; (80a0468 <_Z22__fetch_global_Serial1v+0x44>)
 80a044c:	4907      	ldr	r1, [pc, #28]	; (80a046c <_Z22__fetch_global_Serial1v+0x48>)
 80a044e:	4805      	ldr	r0, [pc, #20]	; (80a0464 <_Z22__fetch_global_Serial1v+0x40>)
 80a0450:	f000 f9ae 	bl	80a07b0 <__aeabi_atexit>
	return serial1;
}
 80a0454:	4803      	ldr	r0, [pc, #12]	; (80a0464 <_Z22__fetch_global_Serial1v+0x40>)
 80a0456:	bd38      	pop	{r3, r4, r5, pc}
 80a0458:	200003a8 	.word	0x200003a8
 80a045c:	200003ac 	.word	0x200003ac
 80a0460:	20000324 	.word	0x20000324
 80a0464:	20000310 	.word	0x20000310
 80a0468:	20000304 	.word	0x20000304
 80a046c:	080a03a5 	.word	0x080a03a5

080a0470 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0470:	7441      	strb	r1, [r0, #17]
 80a0472:	4770      	bx	lr

080a0474 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a0474:	4770      	bx	lr

080a0476 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a0476:	2100      	movs	r1, #0
 80a0478:	7c00      	ldrb	r0, [r0, #16]
 80a047a:	f7ff be93 	b.w	80a01a4 <HAL_USB_USART_Receive_Data>

080a047e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a047e:	2101      	movs	r1, #1
 80a0480:	7c00      	ldrb	r0, [r0, #16]
 80a0482:	f7ff be8f 	b.w	80a01a4 <HAL_USB_USART_Receive_Data>

080a0486 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a0486:	7c00      	ldrb	r0, [r0, #16]
 80a0488:	f7ff be84 	b.w	80a0194 <HAL_USB_USART_Available_Data_For_Write>

080a048c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a048c:	7c00      	ldrb	r0, [r0, #16]
 80a048e:	f7ff be79 	b.w	80a0184 <HAL_USB_USART_Available_Data>

080a0492 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0492:	b538      	push	{r3, r4, r5, lr}
 80a0494:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0496:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a0498:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a049a:	f7ff fe7b 	bl	80a0194 <HAL_USB_USART_Available_Data_For_Write>
 80a049e:	2800      	cmp	r0, #0
 80a04a0:	dc01      	bgt.n	80a04a6 <_ZN9USBSerial5writeEh+0x14>
 80a04a2:	7c60      	ldrb	r0, [r4, #17]
 80a04a4:	b120      	cbz	r0, 80a04b0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a04a6:	4629      	mov	r1, r5
 80a04a8:	7c20      	ldrb	r0, [r4, #16]
 80a04aa:	f7ff fe83 	bl	80a01b4 <HAL_USB_USART_Send_Data>
    return 1;
 80a04ae:	2001      	movs	r0, #1
  }
  return 0;
}
 80a04b0:	bd38      	pop	{r3, r4, r5, pc}

080a04b2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a04b2:	7c00      	ldrb	r0, [r0, #16]
 80a04b4:	f7ff be86 	b.w	80a01c4 <HAL_USB_USART_Flush_Data>

080a04b8 <_ZN9USBSerialD0Ev>:
 80a04b8:	b510      	push	{r4, lr}
 80a04ba:	4604      	mov	r4, r0
 80a04bc:	f7ff fded 	bl	80a009a <_ZdlPv>
 80a04c0:	4620      	mov	r0, r4
 80a04c2:	bd10      	pop	{r4, pc}

080a04c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a04c4:	b510      	push	{r4, lr}
 80a04c6:	4604      	mov	r4, r0
 80a04c8:	2300      	movs	r3, #0
 80a04ca:	6063      	str	r3, [r4, #4]
 80a04cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a04d0:	60a3      	str	r3, [r4, #8]
 80a04d2:	4b05      	ldr	r3, [pc, #20]	; (80a04e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a04d4:	4608      	mov	r0, r1
 80a04d6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a04d8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a04da:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a04dc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a04de:	4611      	mov	r1, r2
 80a04e0:	f7ff fe48 	bl	80a0174 <HAL_USB_USART_Init>
}
 80a04e4:	4620      	mov	r0, r4
 80a04e6:	bd10      	pop	{r4, pc}
 80a04e8:	080a0c20 	.word	0x080a0c20

080a04ec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a04ec:	b510      	push	{r4, lr}
 80a04ee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a04f0:	2214      	movs	r2, #20
 80a04f2:	2100      	movs	r1, #0
 80a04f4:	f000 fac3 	bl	80a0a7e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a04f8:	4b05      	ldr	r3, [pc, #20]	; (80a0510 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a04fa:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a04fc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a04fe:	4b05      	ldr	r3, [pc, #20]	; (80a0514 <_Z19acquireSerialBufferv+0x28>)
 80a0500:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0502:	f240 1301 	movw	r3, #257	; 0x101
 80a0506:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0508:	2381      	movs	r3, #129	; 0x81
 80a050a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a050c:	bd10      	pop	{r4, pc}
 80a050e:	bf00      	nop
 80a0510:	200004b5 	.word	0x200004b5
 80a0514:	20000434 	.word	0x20000434

080a0518 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0518:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a051a:	4d0e      	ldr	r5, [pc, #56]	; (80a0554 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a051c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a051e:	a801      	add	r0, sp, #4
 80a0520:	f7ff ffe4 	bl	80a04ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0524:	6829      	ldr	r1, [r5, #0]
 80a0526:	f011 0401 	ands.w	r4, r1, #1
 80a052a:	d110      	bne.n	80a054e <_Z16_fetch_usbserialv+0x36>
 80a052c:	4628      	mov	r0, r5
 80a052e:	f7ff fdb6 	bl	80a009e <__cxa_guard_acquire>
 80a0532:	b160      	cbz	r0, 80a054e <_Z16_fetch_usbserialv+0x36>
 80a0534:	aa01      	add	r2, sp, #4
 80a0536:	4621      	mov	r1, r4
 80a0538:	4807      	ldr	r0, [pc, #28]	; (80a0558 <_Z16_fetch_usbserialv+0x40>)
 80a053a:	f7ff ffc3 	bl	80a04c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a053e:	4628      	mov	r0, r5
 80a0540:	f7ff fdb2 	bl	80a00a8 <__cxa_guard_release>
 80a0544:	4a05      	ldr	r2, [pc, #20]	; (80a055c <_Z16_fetch_usbserialv+0x44>)
 80a0546:	4906      	ldr	r1, [pc, #24]	; (80a0560 <_Z16_fetch_usbserialv+0x48>)
 80a0548:	4803      	ldr	r0, [pc, #12]	; (80a0558 <_Z16_fetch_usbserialv+0x40>)
 80a054a:	f000 f931 	bl	80a07b0 <__aeabi_atexit>
	return _usbserial;
}
 80a054e:	4802      	ldr	r0, [pc, #8]	; (80a0558 <_Z16_fetch_usbserialv+0x40>)
 80a0550:	b007      	add	sp, #28
 80a0552:	bd30      	pop	{r4, r5, pc}
 80a0554:	20000430 	.word	0x20000430
 80a0558:	200005b8 	.word	0x200005b8
 80a055c:	20000304 	.word	0x20000304
 80a0560:	080a0475 	.word	0x080a0475

080a0564 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0564:	b510      	push	{r4, lr}
 80a0566:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0568:	2214      	movs	r2, #20
 80a056a:	2100      	movs	r1, #0
 80a056c:	f000 fa87 	bl	80a0a7e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0570:	4b05      	ldr	r3, [pc, #20]	; (80a0588 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0572:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0574:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0576:	4b05      	ldr	r3, [pc, #20]	; (80a058c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0578:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a057a:	f240 1301 	movw	r3, #257	; 0x101
 80a057e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0580:	2381      	movs	r3, #129	; 0x81
 80a0582:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0584:	bd10      	pop	{r4, pc}
 80a0586:	bf00      	nop
 80a0588:	20000668 	.word	0x20000668
 80a058c:	200005d0 	.word	0x200005d0

080a0590 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0590:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0592:	4c0e      	ldr	r4, [pc, #56]	; (80a05cc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0594:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0596:	a801      	add	r0, sp, #4
 80a0598:	f7ff ffe4 	bl	80a0564 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a059c:	6823      	ldr	r3, [r4, #0]
 80a059e:	07db      	lsls	r3, r3, #31
 80a05a0:	d410      	bmi.n	80a05c4 <_Z17_fetch_usbserial1v+0x34>
 80a05a2:	4620      	mov	r0, r4
 80a05a4:	f7ff fd7b 	bl	80a009e <__cxa_guard_acquire>
 80a05a8:	b160      	cbz	r0, 80a05c4 <_Z17_fetch_usbserial1v+0x34>
 80a05aa:	aa01      	add	r2, sp, #4
 80a05ac:	2101      	movs	r1, #1
 80a05ae:	4808      	ldr	r0, [pc, #32]	; (80a05d0 <_Z17_fetch_usbserial1v+0x40>)
 80a05b0:	f7ff ff88 	bl	80a04c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a05b4:	4620      	mov	r0, r4
 80a05b6:	f7ff fd77 	bl	80a00a8 <__cxa_guard_release>
 80a05ba:	4a06      	ldr	r2, [pc, #24]	; (80a05d4 <_Z17_fetch_usbserial1v+0x44>)
 80a05bc:	4906      	ldr	r1, [pc, #24]	; (80a05d8 <_Z17_fetch_usbserial1v+0x48>)
 80a05be:	4804      	ldr	r0, [pc, #16]	; (80a05d0 <_Z17_fetch_usbserial1v+0x40>)
 80a05c0:	f000 f8f6 	bl	80a07b0 <__aeabi_atexit>
  return _usbserial1;
}
 80a05c4:	4802      	ldr	r0, [pc, #8]	; (80a05d0 <_Z17_fetch_usbserial1v+0x40>)
 80a05c6:	b006      	add	sp, #24
 80a05c8:	bd10      	pop	{r4, pc}
 80a05ca:	bf00      	nop
 80a05cc:	200005cc 	.word	0x200005cc
 80a05d0:	20000654 	.word	0x20000654
 80a05d4:	20000304 	.word	0x20000304
 80a05d8:	080a0475 	.word	0x080a0475

080a05dc <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a05dc:	4770      	bx	lr

080a05de <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a05de:	2200      	movs	r2, #0
 80a05e0:	4611      	mov	r1, r2
 80a05e2:	4610      	mov	r0, r2
 80a05e4:	f7ff be0e 	b.w	80a0204 <network_ready>

080a05e8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a05e8:	4803      	ldr	r0, [pc, #12]	; (80a05f8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a05ea:	4b04      	ldr	r3, [pc, #16]	; (80a05fc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a05ec:	4a04      	ldr	r2, [pc, #16]	; (80a0600 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a05ee:	4905      	ldr	r1, [pc, #20]	; (80a0604 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a05f0:	6003      	str	r3, [r0, #0]
 80a05f2:	f000 b8dd 	b.w	80a07b0 <__aeabi_atexit>
 80a05f6:	bf00      	nop
 80a05f8:	2000076c 	.word	0x2000076c
 80a05fc:	080a0c50 	.word	0x080a0c50
 80a0600:	20000304 	.word	0x20000304
 80a0604:	080a05dd 	.word	0x080a05dd

080a0608 <setup>:
 80a0608:	4770      	bx	lr

080a060a <loop>:
void setup()  {

}


void loop() {
 80a060a:	4770      	bx	lr

080a060c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a060c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a060e:	4b14      	ldr	r3, [pc, #80]	; (80a0660 <serialEventRun+0x54>)
 80a0610:	b133      	cbz	r3, 80a0620 <serialEventRun+0x14>
 80a0612:	f7ff ff81 	bl	80a0518 <_Z16_fetch_usbserialv>
 80a0616:	6803      	ldr	r3, [r0, #0]
 80a0618:	691b      	ldr	r3, [r3, #16]
 80a061a:	4798      	blx	r3
 80a061c:	2800      	cmp	r0, #0
 80a061e:	dc16      	bgt.n	80a064e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0620:	4b10      	ldr	r3, [pc, #64]	; (80a0664 <serialEventRun+0x58>)
 80a0622:	b133      	cbz	r3, 80a0632 <serialEventRun+0x26>
 80a0624:	f7ff fefe 	bl	80a0424 <_Z22__fetch_global_Serial1v>
 80a0628:	6803      	ldr	r3, [r0, #0]
 80a062a:	691b      	ldr	r3, [r3, #16]
 80a062c:	4798      	blx	r3
 80a062e:	2800      	cmp	r0, #0
 80a0630:	dc10      	bgt.n	80a0654 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0632:	4b0d      	ldr	r3, [pc, #52]	; (80a0668 <serialEventRun+0x5c>)
 80a0634:	b10b      	cbz	r3, 80a063a <serialEventRun+0x2e>
 80a0636:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a063a:	4b0c      	ldr	r3, [pc, #48]	; (80a066c <serialEventRun+0x60>)
 80a063c:	b17b      	cbz	r3, 80a065e <serialEventRun+0x52>
 80a063e:	f7ff ffa7 	bl	80a0590 <_Z17_fetch_usbserial1v>
 80a0642:	6803      	ldr	r3, [r0, #0]
 80a0644:	691b      	ldr	r3, [r3, #16]
 80a0646:	4798      	blx	r3
 80a0648:	2800      	cmp	r0, #0
 80a064a:	dc06      	bgt.n	80a065a <serialEventRun+0x4e>
 80a064c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a064e:	f3af 8000 	nop.w
 80a0652:	e7e5      	b.n	80a0620 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0654:	f3af 8000 	nop.w
 80a0658:	e7eb      	b.n	80a0632 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a065a:	f3af 8000 	nop.w
 80a065e:	bd08      	pop	{r3, pc}
	...

080a0670 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0670:	b508      	push	{r3, lr}
	serialEventRun();
 80a0672:	f7ff ffcb 	bl	80a060c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0676:	f7ff fd2d 	bl	80a00d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a067a:	4b01      	ldr	r3, [pc, #4]	; (80a0680 <_post_loop+0x10>)
 80a067c:	6018      	str	r0, [r3, #0]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	20000778 	.word	0x20000778

080a0684 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0684:	4802      	ldr	r0, [pc, #8]	; (80a0690 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0686:	4a03      	ldr	r2, [pc, #12]	; (80a0694 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0688:	4903      	ldr	r1, [pc, #12]	; (80a0698 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a068a:	1a12      	subs	r2, r2, r0
 80a068c:	f000 b9ec 	b.w	80a0a68 <memcpy>
 80a0690:	40024000 	.word	0x40024000
 80a0694:	40024004 	.word	0x40024004
 80a0698:	080a0c80 	.word	0x080a0c80

080a069c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a069c:	2000      	movs	r0, #0
 80a069e:	4770      	bx	lr

080a06a0 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a06a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a06a2:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a06a4:	4604      	mov	r4, r0
    switch (req->type) {
 80a06a6:	2b0a      	cmp	r3, #10
 80a06a8:	d00e      	beq.n	80a06c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a06aa:	2b50      	cmp	r3, #80	; 0x50
 80a06ac:	d11c      	bne.n	80a06e8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a06ae:	4b10      	ldr	r3, [pc, #64]	; (80a06f0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a06b0:	681d      	ldr	r5, [r3, #0]
 80a06b2:	b1cd      	cbz	r5, 80a06e8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a06b4:	7d03      	ldrb	r3, [r0, #20]
 80a06b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a06ba:	9300      	str	r3, [sp, #0]
 80a06bc:	68c2      	ldr	r2, [r0, #12]
 80a06be:	f100 0310 	add.w	r3, r0, #16
 80a06c2:	6880      	ldr	r0, [r0, #8]
 80a06c4:	47a8      	blx	r5
 80a06c6:	e007      	b.n	80a06d8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a06c8:	f100 0310 	add.w	r3, r0, #16
 80a06cc:	68c2      	ldr	r2, [r0, #12]
 80a06ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a06d2:	6880      	ldr	r0, [r0, #8]
 80a06d4:	f7ff ffe2 	bl	80a069c <_Z26usb_request_custom_handlerPcjjPj>
 80a06d8:	b130      	cbz	r0, 80a06e8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a06da:	2200      	movs	r2, #0
 80a06dc:	4620      	mov	r0, r4
 80a06de:	4611      	mov	r1, r2
 80a06e0:	f7ff fd88 	bl	80a01f4 <system_set_usb_request_result>
        return true;
 80a06e4:	2001      	movs	r0, #1
 80a06e6:	e000      	b.n	80a06ea <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a06e8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a06ea:	b003      	add	sp, #12
 80a06ec:	bd30      	pop	{r4, r5, pc}
 80a06ee:	bf00      	nop
 80a06f0:	20000770 	.word	0x20000770

080a06f4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a06f4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a06f6:	4c0c      	ldr	r4, [pc, #48]	; (80a0728 <module_user_init_hook+0x34>)
 80a06f8:	4d0c      	ldr	r5, [pc, #48]	; (80a072c <module_user_init_hook+0x38>)
 80a06fa:	6823      	ldr	r3, [r4, #0]
 80a06fc:	42ab      	cmp	r3, r5
 80a06fe:	4b0c      	ldr	r3, [pc, #48]	; (80a0730 <module_user_init_hook+0x3c>)
 80a0700:	bf0c      	ite	eq
 80a0702:	2201      	moveq	r2, #1
 80a0704:	2200      	movne	r2, #0
 80a0706:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0708:	d002      	beq.n	80a0710 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a070a:	f7ff ffbb 	bl	80a0684 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a070e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a0710:	4b08      	ldr	r3, [pc, #32]	; (80a0734 <module_user_init_hook+0x40>)
 80a0712:	b11b      	cbz	r3, 80a071c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0714:	f7ff fcd6 	bl	80a00c4 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a0718:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a071c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a0720:	2100      	movs	r1, #0
 80a0722:	4805      	ldr	r0, [pc, #20]	; (80a0738 <module_user_init_hook+0x44>)
 80a0724:	f7ff bd5e 	b.w	80a01e4 <system_set_usb_request_app_handler>
 80a0728:	40024000 	.word	0x40024000
 80a072c:	9a271c1e 	.word	0x9a271c1e
 80a0730:	20000774 	.word	0x20000774
 80a0734:	00000000 	.word	0x00000000
 80a0738:	080a06a1 	.word	0x080a06a1

080a073c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a073c:	b513      	push	{r0, r1, r4, lr}
 80a073e:	4c08      	ldr	r4, [pc, #32]	; (80a0760 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0740:	2300      	movs	r3, #0
 80a0742:	461a      	mov	r2, r3
 80a0744:	4619      	mov	r1, r3
 80a0746:	9300      	str	r3, [sp, #0]
 80a0748:	4620      	mov	r0, r4
 80a074a:	f7ff fd99 	bl	80a0280 <_ZN9IPAddressC1Ehhhh>
 80a074e:	4620      	mov	r0, r4
 80a0750:	4a04      	ldr	r2, [pc, #16]	; (80a0764 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0752:	4905      	ldr	r1, [pc, #20]	; (80a0768 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0754:	b002      	add	sp, #8
 80a0756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a075a:	f000 b829 	b.w	80a07b0 <__aeabi_atexit>
 80a075e:	bf00      	nop
 80a0760:	2000077c 	.word	0x2000077c
 80a0764:	20000304 	.word	0x20000304
 80a0768:	080a0225 	.word	0x080a0225

080a076c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a076c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a076e:	4c0c      	ldr	r4, [pc, #48]	; (80a07a0 <_GLOBAL__sub_I_SPI+0x34>)
 80a0770:	4e0c      	ldr	r6, [pc, #48]	; (80a07a4 <_GLOBAL__sub_I_SPI+0x38>)
 80a0772:	4d0d      	ldr	r5, [pc, #52]	; (80a07a8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0774:	2100      	movs	r1, #0
 80a0776:	4620      	mov	r0, r4
 80a0778:	f7ff fdf2 	bl	80a0360 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a077c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a077e:	4c0b      	ldr	r4, [pc, #44]	; (80a07ac <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0780:	4632      	mov	r2, r6
 80a0782:	4629      	mov	r1, r5
 80a0784:	f000 f814 	bl	80a07b0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0788:	2101      	movs	r1, #1
 80a078a:	4620      	mov	r0, r4
 80a078c:	f7ff fde8 	bl	80a0360 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0790:	4632      	mov	r2, r6
 80a0792:	4629      	mov	r1, r5
 80a0794:	4620      	mov	r0, r4
 80a0796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a079a:	f000 b809 	b.w	80a07b0 <__aeabi_atexit>
 80a079e:	bf00      	nop
 80a07a0:	20000794 	.word	0x20000794
 80a07a4:	20000304 	.word	0x20000304
 80a07a8:	080a0353 	.word	0x080a0353
 80a07ac:	200007a4 	.word	0x200007a4

080a07b0 <__aeabi_atexit>:
 80a07b0:	460b      	mov	r3, r1
 80a07b2:	4601      	mov	r1, r0
 80a07b4:	4618      	mov	r0, r3
 80a07b6:	f000 b949 	b.w	80a0a4c <__cxa_atexit>
	...

080a07bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a07bc:	4b24      	ldr	r3, [pc, #144]	; (80a0850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a07be:	681a      	ldr	r2, [r3, #0]
 80a07c0:	07d0      	lsls	r0, r2, #31
 80a07c2:	bf5c      	itt	pl
 80a07c4:	2201      	movpl	r2, #1
 80a07c6:	601a      	strpl	r2, [r3, #0]
 80a07c8:	4b22      	ldr	r3, [pc, #136]	; (80a0854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a07ca:	681a      	ldr	r2, [r3, #0]
 80a07cc:	07d1      	lsls	r1, r2, #31
 80a07ce:	bf5c      	itt	pl
 80a07d0:	2201      	movpl	r2, #1
 80a07d2:	601a      	strpl	r2, [r3, #0]
 80a07d4:	4b20      	ldr	r3, [pc, #128]	; (80a0858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a07d6:	681a      	ldr	r2, [r3, #0]
 80a07d8:	07d2      	lsls	r2, r2, #31
 80a07da:	bf5c      	itt	pl
 80a07dc:	2201      	movpl	r2, #1
 80a07de:	601a      	strpl	r2, [r3, #0]
 80a07e0:	4b1e      	ldr	r3, [pc, #120]	; (80a085c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a07e2:	681a      	ldr	r2, [r3, #0]
 80a07e4:	07d0      	lsls	r0, r2, #31
 80a07e6:	bf5c      	itt	pl
 80a07e8:	2201      	movpl	r2, #1
 80a07ea:	601a      	strpl	r2, [r3, #0]
 80a07ec:	4b1c      	ldr	r3, [pc, #112]	; (80a0860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a07ee:	681a      	ldr	r2, [r3, #0]
 80a07f0:	07d1      	lsls	r1, r2, #31
 80a07f2:	bf5c      	itt	pl
 80a07f4:	2201      	movpl	r2, #1
 80a07f6:	601a      	strpl	r2, [r3, #0]
 80a07f8:	4b1a      	ldr	r3, [pc, #104]	; (80a0864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a07fa:	681a      	ldr	r2, [r3, #0]
 80a07fc:	07d2      	lsls	r2, r2, #31
 80a07fe:	bf5c      	itt	pl
 80a0800:	2201      	movpl	r2, #1
 80a0802:	601a      	strpl	r2, [r3, #0]
 80a0804:	4b18      	ldr	r3, [pc, #96]	; (80a0868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0806:	681a      	ldr	r2, [r3, #0]
 80a0808:	07d0      	lsls	r0, r2, #31
 80a080a:	bf5c      	itt	pl
 80a080c:	2201      	movpl	r2, #1
 80a080e:	601a      	strpl	r2, [r3, #0]
 80a0810:	4b16      	ldr	r3, [pc, #88]	; (80a086c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0812:	681a      	ldr	r2, [r3, #0]
 80a0814:	07d1      	lsls	r1, r2, #31
 80a0816:	bf5c      	itt	pl
 80a0818:	2201      	movpl	r2, #1
 80a081a:	601a      	strpl	r2, [r3, #0]
 80a081c:	4b14      	ldr	r3, [pc, #80]	; (80a0870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a081e:	681a      	ldr	r2, [r3, #0]
 80a0820:	07d2      	lsls	r2, r2, #31
 80a0822:	bf5c      	itt	pl
 80a0824:	2201      	movpl	r2, #1
 80a0826:	601a      	strpl	r2, [r3, #0]
 80a0828:	4b12      	ldr	r3, [pc, #72]	; (80a0874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a082a:	681a      	ldr	r2, [r3, #0]
 80a082c:	07d0      	lsls	r0, r2, #31
 80a082e:	bf5c      	itt	pl
 80a0830:	2201      	movpl	r2, #1
 80a0832:	601a      	strpl	r2, [r3, #0]
 80a0834:	4b10      	ldr	r3, [pc, #64]	; (80a0878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0836:	681a      	ldr	r2, [r3, #0]
 80a0838:	07d1      	lsls	r1, r2, #31
 80a083a:	bf5c      	itt	pl
 80a083c:	2201      	movpl	r2, #1
 80a083e:	601a      	strpl	r2, [r3, #0]
 80a0840:	4b0e      	ldr	r3, [pc, #56]	; (80a087c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0842:	681a      	ldr	r2, [r3, #0]
 80a0844:	07d2      	lsls	r2, r2, #31
 80a0846:	bf5c      	itt	pl
 80a0848:	2201      	movpl	r2, #1
 80a084a:	601a      	strpl	r2, [r3, #0]
 80a084c:	4770      	bx	lr
 80a084e:	bf00      	nop
 80a0850:	200007e0 	.word	0x200007e0
 80a0854:	200007dc 	.word	0x200007dc
 80a0858:	200007d8 	.word	0x200007d8
 80a085c:	200007d4 	.word	0x200007d4
 80a0860:	200007d0 	.word	0x200007d0
 80a0864:	200007cc 	.word	0x200007cc
 80a0868:	200007c8 	.word	0x200007c8
 80a086c:	200007c4 	.word	0x200007c4
 80a0870:	200007c0 	.word	0x200007c0
 80a0874:	200007bc 	.word	0x200007bc
 80a0878:	200007b8 	.word	0x200007b8
 80a087c:	200007b4 	.word	0x200007b4

080a0880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0880:	4b18      	ldr	r3, [pc, #96]	; (80a08e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0882:	681a      	ldr	r2, [r3, #0]
 80a0884:	07d1      	lsls	r1, r2, #31
 80a0886:	bf5c      	itt	pl
 80a0888:	2201      	movpl	r2, #1
 80a088a:	601a      	strpl	r2, [r3, #0]
 80a088c:	4b16      	ldr	r3, [pc, #88]	; (80a08e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a088e:	681a      	ldr	r2, [r3, #0]
 80a0890:	07d2      	lsls	r2, r2, #31
 80a0892:	bf5c      	itt	pl
 80a0894:	2201      	movpl	r2, #1
 80a0896:	601a      	strpl	r2, [r3, #0]
 80a0898:	4b14      	ldr	r3, [pc, #80]	; (80a08ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a089a:	681a      	ldr	r2, [r3, #0]
 80a089c:	07d0      	lsls	r0, r2, #31
 80a089e:	bf5c      	itt	pl
 80a08a0:	2201      	movpl	r2, #1
 80a08a2:	601a      	strpl	r2, [r3, #0]
 80a08a4:	4b12      	ldr	r3, [pc, #72]	; (80a08f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a08a6:	681a      	ldr	r2, [r3, #0]
 80a08a8:	07d1      	lsls	r1, r2, #31
 80a08aa:	bf5c      	itt	pl
 80a08ac:	2201      	movpl	r2, #1
 80a08ae:	601a      	strpl	r2, [r3, #0]
 80a08b0:	4b10      	ldr	r3, [pc, #64]	; (80a08f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a08b2:	681a      	ldr	r2, [r3, #0]
 80a08b4:	07d2      	lsls	r2, r2, #31
 80a08b6:	bf5c      	itt	pl
 80a08b8:	2201      	movpl	r2, #1
 80a08ba:	601a      	strpl	r2, [r3, #0]
 80a08bc:	4b0e      	ldr	r3, [pc, #56]	; (80a08f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a08be:	681a      	ldr	r2, [r3, #0]
 80a08c0:	07d0      	lsls	r0, r2, #31
 80a08c2:	bf5c      	itt	pl
 80a08c4:	2201      	movpl	r2, #1
 80a08c6:	601a      	strpl	r2, [r3, #0]
 80a08c8:	4b0c      	ldr	r3, [pc, #48]	; (80a08fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a08ca:	681a      	ldr	r2, [r3, #0]
 80a08cc:	07d1      	lsls	r1, r2, #31
 80a08ce:	bf5c      	itt	pl
 80a08d0:	2201      	movpl	r2, #1
 80a08d2:	601a      	strpl	r2, [r3, #0]
 80a08d4:	4b0a      	ldr	r3, [pc, #40]	; (80a0900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a08d6:	681a      	ldr	r2, [r3, #0]
 80a08d8:	07d2      	lsls	r2, r2, #31
 80a08da:	bf5c      	itt	pl
 80a08dc:	2201      	movpl	r2, #1
 80a08de:	601a      	strpl	r2, [r3, #0]
 80a08e0:	4770      	bx	lr
 80a08e2:	bf00      	nop
 80a08e4:	20000800 	.word	0x20000800
 80a08e8:	200007fc 	.word	0x200007fc
 80a08ec:	200007f8 	.word	0x200007f8
 80a08f0:	200007f4 	.word	0x200007f4
 80a08f4:	200007f0 	.word	0x200007f0
 80a08f8:	200007ec 	.word	0x200007ec
 80a08fc:	200007e8 	.word	0x200007e8
 80a0900:	200007e4 	.word	0x200007e4

080a0904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0904:	4b18      	ldr	r3, [pc, #96]	; (80a0968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0906:	681a      	ldr	r2, [r3, #0]
 80a0908:	07d1      	lsls	r1, r2, #31
 80a090a:	bf5c      	itt	pl
 80a090c:	2201      	movpl	r2, #1
 80a090e:	601a      	strpl	r2, [r3, #0]
 80a0910:	4b16      	ldr	r3, [pc, #88]	; (80a096c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0912:	681a      	ldr	r2, [r3, #0]
 80a0914:	07d2      	lsls	r2, r2, #31
 80a0916:	bf5c      	itt	pl
 80a0918:	2201      	movpl	r2, #1
 80a091a:	601a      	strpl	r2, [r3, #0]
 80a091c:	4b14      	ldr	r3, [pc, #80]	; (80a0970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a091e:	681a      	ldr	r2, [r3, #0]
 80a0920:	07d0      	lsls	r0, r2, #31
 80a0922:	bf5c      	itt	pl
 80a0924:	2201      	movpl	r2, #1
 80a0926:	601a      	strpl	r2, [r3, #0]
 80a0928:	4b12      	ldr	r3, [pc, #72]	; (80a0974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a092a:	681a      	ldr	r2, [r3, #0]
 80a092c:	07d1      	lsls	r1, r2, #31
 80a092e:	bf5c      	itt	pl
 80a0930:	2201      	movpl	r2, #1
 80a0932:	601a      	strpl	r2, [r3, #0]
 80a0934:	4b10      	ldr	r3, [pc, #64]	; (80a0978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0936:	681a      	ldr	r2, [r3, #0]
 80a0938:	07d2      	lsls	r2, r2, #31
 80a093a:	bf5c      	itt	pl
 80a093c:	2201      	movpl	r2, #1
 80a093e:	601a      	strpl	r2, [r3, #0]
 80a0940:	4b0e      	ldr	r3, [pc, #56]	; (80a097c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0942:	681a      	ldr	r2, [r3, #0]
 80a0944:	07d0      	lsls	r0, r2, #31
 80a0946:	bf5c      	itt	pl
 80a0948:	2201      	movpl	r2, #1
 80a094a:	601a      	strpl	r2, [r3, #0]
 80a094c:	4b0c      	ldr	r3, [pc, #48]	; (80a0980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a094e:	681a      	ldr	r2, [r3, #0]
 80a0950:	07d1      	lsls	r1, r2, #31
 80a0952:	bf5c      	itt	pl
 80a0954:	2201      	movpl	r2, #1
 80a0956:	601a      	strpl	r2, [r3, #0]
 80a0958:	4b0a      	ldr	r3, [pc, #40]	; (80a0984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a095a:	681a      	ldr	r2, [r3, #0]
 80a095c:	07d2      	lsls	r2, r2, #31
 80a095e:	bf5c      	itt	pl
 80a0960:	2201      	movpl	r2, #1
 80a0962:	601a      	strpl	r2, [r3, #0]
 80a0964:	4770      	bx	lr
 80a0966:	bf00      	nop
 80a0968:	20000820 	.word	0x20000820
 80a096c:	2000081c 	.word	0x2000081c
 80a0970:	20000818 	.word	0x20000818
 80a0974:	20000814 	.word	0x20000814
 80a0978:	20000810 	.word	0x20000810
 80a097c:	2000080c 	.word	0x2000080c
 80a0980:	20000808 	.word	0x20000808
 80a0984:	20000804 	.word	0x20000804

080a0988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0988:	4b24      	ldr	r3, [pc, #144]	; (80a0a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a098a:	681a      	ldr	r2, [r3, #0]
 80a098c:	07d0      	lsls	r0, r2, #31
 80a098e:	bf5c      	itt	pl
 80a0990:	2201      	movpl	r2, #1
 80a0992:	601a      	strpl	r2, [r3, #0]
 80a0994:	4b22      	ldr	r3, [pc, #136]	; (80a0a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0996:	681a      	ldr	r2, [r3, #0]
 80a0998:	07d1      	lsls	r1, r2, #31
 80a099a:	bf5c      	itt	pl
 80a099c:	2201      	movpl	r2, #1
 80a099e:	601a      	strpl	r2, [r3, #0]
 80a09a0:	4b20      	ldr	r3, [pc, #128]	; (80a0a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a09a2:	681a      	ldr	r2, [r3, #0]
 80a09a4:	07d2      	lsls	r2, r2, #31
 80a09a6:	bf5c      	itt	pl
 80a09a8:	2201      	movpl	r2, #1
 80a09aa:	601a      	strpl	r2, [r3, #0]
 80a09ac:	4b1e      	ldr	r3, [pc, #120]	; (80a0a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a09ae:	681a      	ldr	r2, [r3, #0]
 80a09b0:	07d0      	lsls	r0, r2, #31
 80a09b2:	bf5c      	itt	pl
 80a09b4:	2201      	movpl	r2, #1
 80a09b6:	601a      	strpl	r2, [r3, #0]
 80a09b8:	4b1c      	ldr	r3, [pc, #112]	; (80a0a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a09ba:	681a      	ldr	r2, [r3, #0]
 80a09bc:	07d1      	lsls	r1, r2, #31
 80a09be:	bf5c      	itt	pl
 80a09c0:	2201      	movpl	r2, #1
 80a09c2:	601a      	strpl	r2, [r3, #0]
 80a09c4:	4b1a      	ldr	r3, [pc, #104]	; (80a0a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a09c6:	681a      	ldr	r2, [r3, #0]
 80a09c8:	07d2      	lsls	r2, r2, #31
 80a09ca:	bf5c      	itt	pl
 80a09cc:	2201      	movpl	r2, #1
 80a09ce:	601a      	strpl	r2, [r3, #0]
 80a09d0:	4b18      	ldr	r3, [pc, #96]	; (80a0a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a09d2:	681a      	ldr	r2, [r3, #0]
 80a09d4:	07d0      	lsls	r0, r2, #31
 80a09d6:	bf5c      	itt	pl
 80a09d8:	2201      	movpl	r2, #1
 80a09da:	601a      	strpl	r2, [r3, #0]
 80a09dc:	4b16      	ldr	r3, [pc, #88]	; (80a0a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a09de:	681a      	ldr	r2, [r3, #0]
 80a09e0:	07d1      	lsls	r1, r2, #31
 80a09e2:	bf5c      	itt	pl
 80a09e4:	2201      	movpl	r2, #1
 80a09e6:	601a      	strpl	r2, [r3, #0]
 80a09e8:	4b14      	ldr	r3, [pc, #80]	; (80a0a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a09ea:	681a      	ldr	r2, [r3, #0]
 80a09ec:	07d2      	lsls	r2, r2, #31
 80a09ee:	bf5c      	itt	pl
 80a09f0:	2201      	movpl	r2, #1
 80a09f2:	601a      	strpl	r2, [r3, #0]
 80a09f4:	4b12      	ldr	r3, [pc, #72]	; (80a0a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a09f6:	681a      	ldr	r2, [r3, #0]
 80a09f8:	07d0      	lsls	r0, r2, #31
 80a09fa:	bf5c      	itt	pl
 80a09fc:	2201      	movpl	r2, #1
 80a09fe:	601a      	strpl	r2, [r3, #0]
 80a0a00:	4b10      	ldr	r3, [pc, #64]	; (80a0a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0a02:	681a      	ldr	r2, [r3, #0]
 80a0a04:	07d1      	lsls	r1, r2, #31
 80a0a06:	bf5c      	itt	pl
 80a0a08:	2201      	movpl	r2, #1
 80a0a0a:	601a      	strpl	r2, [r3, #0]
 80a0a0c:	4b0e      	ldr	r3, [pc, #56]	; (80a0a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0a0e:	681a      	ldr	r2, [r3, #0]
 80a0a10:	07d2      	lsls	r2, r2, #31
 80a0a12:	bf5c      	itt	pl
 80a0a14:	2201      	movpl	r2, #1
 80a0a16:	601a      	strpl	r2, [r3, #0]
 80a0a18:	4770      	bx	lr
 80a0a1a:	bf00      	nop
 80a0a1c:	20000850 	.word	0x20000850
 80a0a20:	2000084c 	.word	0x2000084c
 80a0a24:	20000848 	.word	0x20000848
 80a0a28:	20000844 	.word	0x20000844
 80a0a2c:	20000840 	.word	0x20000840
 80a0a30:	2000083c 	.word	0x2000083c
 80a0a34:	20000838 	.word	0x20000838
 80a0a38:	20000834 	.word	0x20000834
 80a0a3c:	20000830 	.word	0x20000830
 80a0a40:	2000082c 	.word	0x2000082c
 80a0a44:	20000828 	.word	0x20000828
 80a0a48:	20000824 	.word	0x20000824

080a0a4c <__cxa_atexit>:
 80a0a4c:	b510      	push	{r4, lr}
 80a0a4e:	4c05      	ldr	r4, [pc, #20]	; (80a0a64 <__cxa_atexit+0x18>)
 80a0a50:	4613      	mov	r3, r2
 80a0a52:	b12c      	cbz	r4, 80a0a60 <__cxa_atexit+0x14>
 80a0a54:	460a      	mov	r2, r1
 80a0a56:	4601      	mov	r1, r0
 80a0a58:	2002      	movs	r0, #2
 80a0a5a:	f3af 8000 	nop.w
 80a0a5e:	bd10      	pop	{r4, pc}
 80a0a60:	4620      	mov	r0, r4
 80a0a62:	bd10      	pop	{r4, pc}
 80a0a64:	00000000 	.word	0x00000000

080a0a68 <memcpy>:
 80a0a68:	b510      	push	{r4, lr}
 80a0a6a:	1e43      	subs	r3, r0, #1
 80a0a6c:	440a      	add	r2, r1
 80a0a6e:	4291      	cmp	r1, r2
 80a0a70:	d004      	beq.n	80a0a7c <memcpy+0x14>
 80a0a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0a7a:	e7f8      	b.n	80a0a6e <memcpy+0x6>
 80a0a7c:	bd10      	pop	{r4, pc}

080a0a7e <memset>:
 80a0a7e:	4603      	mov	r3, r0
 80a0a80:	4402      	add	r2, r0
 80a0a82:	4293      	cmp	r3, r2
 80a0a84:	d002      	beq.n	80a0a8c <memset+0xe>
 80a0a86:	f803 1b01 	strb.w	r1, [r3], #1
 80a0a8a:	e7fa      	b.n	80a0a82 <memset+0x4>
 80a0a8c:	4770      	bx	lr

080a0a8e <strlen>:
 80a0a8e:	4603      	mov	r3, r0
 80a0a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0a94:	2a00      	cmp	r2, #0
 80a0a96:	d1fb      	bne.n	80a0a90 <strlen+0x2>
 80a0a98:	1a18      	subs	r0, r3, r0
 80a0a9a:	3801      	subs	r0, #1
 80a0a9c:	4770      	bx	lr

080a0a9e <link_code_end>:
	...

080a0aa0 <dynalib_user>:
 80a0aa0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a0ab0:	0000 0000                                   ....

080a0ab4 <_ZTV9IPAddress>:
	...
 80a0abc:	0233 080a 0225 080a 0227 080a 0066 6e6c     3...%...'...f.ln
 80a0acc:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a0adc:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a0aec:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a0afc:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a0b0c:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a0b1c:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a0b2c:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a0b3c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a0b4c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a0b5c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a0b6c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a0b7c:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a0b8c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a0b9c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a0bac <_ZTV8SPIClass>:
	...
 80a0bb4:	0353 080a 0355 080a 005a 2b25 3330 3a64     S...U...Z.%+03d:
 80a0bc4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a0bd4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a0be4:	0000 0000                                   ....

080a0be8 <_ZTV11USARTSerial>:
	...
 80a0bf0:	03a5 080a 03c9 080a 03d5 080a 02a9 080a     ................
 80a0c00:	03b1 080a 03bd 080a 03b7 080a 03c3 080a     ................
 80a0c10:	03a7 080a 03ab 080a                         ........

080a0c18 <_ZTV9USBSerial>:
	...
 80a0c20:	0475 080a 04b9 080a 0493 080a 02a9 080a     u...............
 80a0c30:	048d 080a 0477 080a 047f 080a 04b3 080a     ....w...........
 80a0c40:	0487 080a 0471 080a                         ....q...

080a0c48 <_ZTVN5spark9WiFiClassE>:
	...
 80a0c50:	05df 080a                                   ....

080a0c54 <link_const_variable_data_end>:
 80a0c54:	080a00af 	.word	0x080a00af
 80a0c58:	080a0299 	.word	0x080a0299
 80a0c5c:	080a0389 	.word	0x080a0389
 80a0c60:	080a0391 	.word	0x080a0391
 80a0c64:	080a05e9 	.word	0x080a05e9
 80a0c68:	080a073d 	.word	0x080a073d
 80a0c6c:	080a076d 	.word	0x080a076d
 80a0c70:	080a07bd 	.word	0x080a07bd
 80a0c74:	080a0881 	.word	0x080a0881
 80a0c78:	080a0905 	.word	0x080a0905
 80a0c7c:	080a0989 	.word	0x080a0989
